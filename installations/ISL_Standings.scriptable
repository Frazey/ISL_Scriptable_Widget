{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-blue",
    "glyph" : "futbol"
  },
  "name" : "ISL_Standings",
  "script" : "const widgetParameter = args.widgetParameter ? args.widgetParameter.toUpperCase() : \"KBFC\"\nwidgetSettings = {\n    teamList: [\"ATKMB\", \"BFC\", \"CFC\", \"FCG\", \"HFC\", \"JFC\", \"KBFC\", \"MCFC\", \"NEUFC\", \"OFC\", \"SCEB\"],\n    teamName: widgetParameter.toUpperCase(),\/\/ Set Team in widget parameter\n\n    \/\/Customize below:\n    expand: true, \/\/ true, to show set team even if they are below place 6. else false\n    highlight: true, \/\/ true, to hightlight set team. else false\n    \/\/---------------\/\/\n    \n    placeholderImage: \"default.png\",\n\n    backgroundColor: {\n        light: \"#ffffff\",\n        dark: \"#141414\"\n    },\n    leagueTitleColor: {\n        light: \"#d6001c\",\n        dark: \"#d6001c\"\n    },\n    highlightedRowColor: {\n        light: \"#e5e6ea\",\n        dark: \"#1f1f1f\"\n    }\n}\n\nlet fm = FileManager.local();\nconst iCloudUsed = fm.isFileStoredIniCloud(module.filename);\nfm = iCloudUsed ? FileManager.iCloud() : fm;\nconst widgetFolder = \"IndianSuperLeague\";\nconst offlinePath = fm.joinPath(fm.documentsDirectory(), widgetFolder);\nif (!fm.fileExists(offlinePath)) fm.createDirectory(offlinePath);\n\n\nif (config.runsInWidget) {\n    let widget = await createWidget();\n    Script.setWidget(widget);\n    Script.complete();\n} else {\n    let widget = await createWidget();\n    Script.complete();\n    await widget.presentSmall();\n}\n\nasync function createWidget() {\n    const islStandings = await getIslStandings();\n    let teamNameIndex = islStandings.findIndex(obj => obj.team_short_name == widgetSettings.teamName);\n    if (widgetSettings.highlight){\n        islStandings[teamNameIndex][\"highlight\"] = true\n    }\n    \n    if (widgetSettings.expand && teamNameIndex >= 6){\n        Array.prototype.swapItems = function(a, b){\n        this[a] = this.splice(b, 1, this[a])[0];\n        return this;\n        }\n        islStandings.swapItems(5, teamNameIndex)[5];\n    }\n    \n    let paddingLeft = 0;\n    let paddingRight = 0;\n    let paddingTop = 2;\n    let paddingBottom = 2;\n\n    let widget = new ListWidget();\n    widget.backgroundColor = Color.dynamic(new Color(widgetSettings.backgroundColor.light), new Color(widgetSettings.backgroundColor.dark));\n    widget.setPadding(paddingTop, paddingLeft, paddingBottom, paddingRight);\n\n    const stack = widget.addStack();\n    const leagueStack = stack.addStack();\n    leagueStack.layoutVertically();\n    leagueStack.addSpacer(2.5);\n\n    const leagueTitleStack = leagueStack.addStack();\n    leagueTitleStack.addSpacer(4);\n    addFormattedText(leagueTitleStack, \"INDIAN SUPER LEAGUE\", Font.semiboldSystemFont(10.5), Color.dynamic(new Color(widgetSettings.leagueTitleColor.light), new Color(widgetSettings.leagueTitleColor.dark)), 1, false);\n    leagueStack.addSpacer(1);\n    \n    const hSpacing = 17;\n    const vSpacing = 18.4;\n    const leagueTableStack = leagueStack.addStack();\n    leagueTableStack.layoutVertically();\n\n\n    for (let i = 0; i < 6; i += 1) {\n        let leagueTableRowStack = leagueTableStack.addStack();\n        leagueTableRowStack.spacing = 2;\n        if (widgetSettings.highlight && islStandings[i].highlight){\n            leagueTableRowStack.backgroundColor = Color.dynamic(new Color(widgetSettings.highlightedRowColor.light), new Color(widgetSettings.highlightedRowColor.dark));\n            leagueTableRowStack.cornerRadius = 4\n        }\n        for (let j = 0; j < 7; j += 1) {\n\n            let cellDataStack = leagueTableRowStack.addStack();\n            cellDataStack.size = new Size(hSpacing, vSpacing);\n            cellDataStack.centerAlignContent();\n            \n            if(j == 0) {\n                let cellDataValue = islStandings[i].position;\n                addFormattedText(cellDataStack, cellDataValue, Font.semiboldSystemFont(10), null, null, true);\n            }else if(j == 1) {\n                if (i == 0){\n                    let cellDataValue = 'T'\n                    addFormattedText(cellDataStack, cellDataValue, Font.semiboldSystemFont(10), null, null, true);\n                }else {\n                    let teamBadgeUrl = encodeURI(`https:\/\/www.indiansuperleague.com\/static-resources\/images\/clubs\/small\/${islStandings[i].team_id}.png`);\n                    let teamBadgeOffline = islStandings[i].team_short_name;\n                    let teamBadgeValue = await getImage(teamBadgeUrl, teamBadgeOffline);\n                    let teamBadgeImage = cellDataStack.addImage(teamBadgeValue);\n                    teamBadgeImage.imageSize = new Size(14, 14);\n                }\n            }else if(j == 2){\n                let cellDataValue = islStandings[i].played;\n                addFormattedText(cellDataStack, cellDataValue, Font.semiboldSystemFont(10), null, null, true);\n            }else if(j == 3){\n                let cellDataValue = islStandings[i].wins;\n                addFormattedText(cellDataStack, cellDataValue, Font.semiboldSystemFont(10), null, null, true);\n            }else if(j == 4){\n                let cellDataValue = islStandings[i].draws;\n                addFormattedText(cellDataStack, cellDataValue, Font.semiboldSystemFont(10), null, null, true);\n            }else if(j == 5){\n                let cellDataValue = islStandings[i].lost;\n                addFormattedText(cellDataStack, cellDataValue, Font.semiboldSystemFont(10), null, null, true);\n            }else if(j === 6){\n                let cellDataValue = islStandings[i].points;\n                addFormattedText(cellDataStack, cellDataValue, Font.semiboldSystemFont(10), null, null, true);\n            }\n      }\n    }\n\n    return widget\n}\n\n\nasync function getIslStandings(){\n    let standings, standingsJson\n    let fileName = \"isl_standings.json\"\n    let url = `https:\/\/www.indiansuperleague.com\/sifeeds\/repo\/football\/live\/india_sl\/json\/259_standings.json`\n    try{\n        let req = new Request(url);\n        standingsJson = await req.loadJSON();\n        standings = standingsJson.standings.groups[0].teams.team;\n\n        headersJson = {\n            position: \"#\",\n            team_id: \"T\",\n            played: \"M\",\n            wins: \"W\",\n            lost: \"L\",\n            draws: \"D\",\n            points: \"P\"\n        }\n        standings.splice(0, 0, headersJson);\n        fm.writeString(fm.joinPath(offlinePath, fileName), JSON.stringify(standings));\n    }catch (err){\n        standings = JSON.parse(fm.readString(fm.joinPath(offlinePath, fileName)));\n    }finally{\n        return standings;\n    }\n}\n\n\nfunction addFormattedText(stack, string, font, textColor, lineLimit, center) {\n    const text = stack.addText(string);\n    text.font = font;\n    if (lineLimit) text.lineLimit = lineLimit;\n    if (textColor) text.textColor = textColor;\n    if (center) text.centerAlignText();\n}\n\n\nasync function getImage(url, teamName) {\n    let image;\n    let teamLogoPath = fm.joinPath(offlinePath, teamName);\n    if (fm.fileExists(teamLogoPath)){\n        if (iCloudUsed) await fm.downloadFileFromiCloud(teamLogoPath);\n        image = fm.readImage(teamLogoPath);\n    }else{\n        try{\n            image = await new Request(url).loadImage();\n            fm.writeImage(fm.joinPath(offlinePath, teamName), image);\n\n        } catch (err){\n            let symbol = SFSymbol.named(\"shield.fill\")\n            image = symbol.image\n        }\n    }\n    return image\n}",
  "share_sheet_inputs" : [

  ]
}